name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    # Optionally trigger on tags
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  # For automatic builds of new Go/Alpine versions
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sundays

env:
  REGISTRY: docker.io
  IMAGE_NAME: your-dockerhub-username/webhook

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      go_version: ${{ steps.get-version.outputs.go_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Extract Go version from go.mod
        id: get-version
        run: |
          GO_VERSION=$(grep -E '^go [0-9]+\.[0-9]+' go.mod | cut -d' ' -f2)
          echo "go_version=$GO_VERSION" >> $GITHUB_OUTPUT
          
  build-and-push:
    needs: extract-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        alpine_version: ['3.20', '3.21']

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=go${{ matrix.go_version }}-alpine${{ matrix.alpine_version }}
            type=raw,value=go${{ matrix.go_version }},enable={{is_default_branch}}
            type=raw,value=alpine${{ matrix.alpine_version }},enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GO_VERSION=${{ needs.extract-version.outputs.go_version }}
            ALPINE_VERSION=${{ matrix.alpine_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 